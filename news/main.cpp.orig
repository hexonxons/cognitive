#define _CRT_SECURE_NO_WARNINGS

#include "tagprocess.h"

#include <fstream>

using namespace std;

/**
 * \fn  int main()
 *
 * \brief   Main entry-point for this application.
 * \algo
 * 			ќписание алгоритма:
 * 			- ‘айл считываетс€ в строчку m_fileData. N символов.\n\n
 * 			
 * 			- m_fileData переводитс€ в нижний регистр.\n
 * 			<b>O(N)</b>\n\n
 * 			
 * 			- ѕропускаем до тега < head >\n\n
 * 			
 * 			- —читываем до тега < /head >.  ладем каждый полученный тег в m_VtagFileData и в m_alphabet. ¬сего тегов - M.\n
 * 			<b>O(MlogM) + O(N)\n\n
 * 			 
 * 			- ”дал€ем ненужные теги и ненужные пары <открывающий тег, закрывающий тег> тегов, со всем, что между ними.\n\n
 * 			<b>O(M * NumOfTagsToDel)</b>\n\n
 * 			
 * 			- —оставл€ем таблицу.\n
 * 			<b>O(M ^ 2)</b>\n\n
 * 			
 * 			- ѕроходим по таблице и составл€ем массив пар < ѕоследовательность тегов, „астота встречи >.\n
 * 			<b>O[(M - m_minSz - 1) * (M - m_minSz) * (M + m_minSz - 1)]</b>\n\n
 * 			
 * 			- ƒобавл€ем все последовательности тегов, которые прошли проверку в массив.\n\n
 * 			
 * 			- —ортируем по частоте встречи. ¬ыкидываем последовательности, которые сильно отклон€ютс€ от средних значений частот/длин.\n\n
 * 			
 * 			- ¬ыбираем последовательности начала/конча новости.\n\n
 *
 * \author  Alexander
 * \date    7/20/2011
 *
 * \return  Exit-code for the process - 0 for success, else an error code.
 */


int main()
{
    // массивы ненужных тегов
    vector<pair<string, string>> remDoubleTag;
    vector<string> remTag;
    CNewsFinder finder("news", 8, 10);
    remDoubleTag.push_back(make_pair("<script>", "</script>"));
    remDoubleTag.push_back(make_pair("<noscript>", "</noscript>"));
    remDoubleTag.push_back(make_pair("<form>", "</form>"));
    remDoubleTag.push_back(make_pair("<iframe>", "</iframe>"));
    //remDoubleTag.push_back(make_pair("<ul>", "</ul>"));
    //remDoubleTag.push_back(make_pair("<span>", "</span>"));
    remDoubleTag.push_back(make_pair("<noindex> ", "</noindex> "));
    remDoubleTag.push_back(make_pair("<style>", "</style>"));
    
    remTag.push_back("<html>");
    remTag.push_back("</html>");
    remTag.push_back("<head>");
    remTag.push_back("</head>");
    remTag.push_back("<body>");
    remTag.push_back("</body>");
    remTag.push_back("<link>");
    remTag.push_back("<title>");
    remTag.push_back("</title>");
    remTag.push_back("<meta>");
    remTag.push_back("</meta>");
    remTag.push_back("<base>");
    remTag.push_back("<!-->");
    remTag.push_back("<li>");
    remTag.push_back("</li>");
    //remTag.push_back("<p>");
    //remTag.push_back("</p>");
    //remTag.push_back("<ul>");
    //remTag.push_back("</ul>");
    //remTag.push_back("<span>");
    remTag.push_back("<!-->");

<<<<<<< HEAD
    finder.init(remDoubleTag, remTag);
    finder.getPossibleRanges();
    finder.getNewsRange();
    finder.writeNews();
=======
    finder.Init(remDoubleTag, remTag);
    if (finder.GetlastError() == -1)
    {
        return -1;
    }
    
    finder.GetPossibleRanges();
    finder.GetNewsRange();
    finder.WriteNews("out.html");
>>>>>>> c3932ccb754fbf66223917f47d690a8492335d51

	return 0;
}